#!/bin/sh

#  ci_post_clone.sh
#  ManusPsiqueia
#
#  Script executado pelo Xcode Cloud ap√≥s o clone do reposit√≥rio
#  Created by Manus AI on 2025-09-22.

set -e

echo "üöÄ Iniciando configura√ß√£o p√≥s-clone para Xcode Cloud..."

# Definir vari√°veis de ambiente
export CI_XCODE_CLOUD=true
export BUILD_NUMBER=${CI_BUILD_NUMBER:-1}

echo "üìã Build Number: $BUILD_NUMBER"
echo "üîß Xcode Version: $CI_XCODE_VERSION"
echo "üì± Platform: $CI_PLATFORM"

# Verificar se estamos no ambiente correto
if [ "$CI_XCODE_CLOUD" = "true" ]; then
    echo "‚úÖ Executando no Xcode Cloud"
else
    echo "‚ö†Ô∏è N√£o est√° executando no Xcode Cloud"
fi

# Configurar ambiente baseado no workflow
case "$CI_WORKFLOW" in
    "Development")
        echo "üîß Configurando ambiente de Development"
        export BUILD_ENVIRONMENT="Development"
        export CONFIG_FILE="Configuration/Development.xcconfig"
        ;;
    "Staging")
        echo "üß™ Configurando ambiente de Staging"
        export BUILD_ENVIRONMENT="Staging"
        export CONFIG_FILE="Configuration/Staging.xcconfig"
        ;;
    "Production")
        echo "üöÄ Configurando ambiente de Production"
        export BUILD_ENVIRONMENT="Production"
        export CONFIG_FILE="Configuration/Production.xcconfig"
        ;;
    *)
        echo "‚ö†Ô∏è Workflow n√£o reconhecido: $CI_WORKFLOW"
        echo "üîß Usando configura√ß√£o padr√£o (Development)"
        export BUILD_ENVIRONMENT="Development"
        export CONFIG_FILE="Configuration/Development.xcconfig"
        ;;
esac

# Verificar se o arquivo de configura√ß√£o existe
if [ -f "$CONFIG_FILE" ]; then
    echo "‚úÖ Arquivo de configura√ß√£o encontrado: $CONFIG_FILE"
else
    echo "‚ùå Arquivo de configura√ß√£o n√£o encontrado: $CONFIG_FILE"
    exit 1
fi

# Configurar vari√°veis de ambiente para build
echo "üîê Configurando vari√°veis de ambiente..."

# Verificar se CI_DERIVED_DATA_PATH est√° definido, caso contr√°rio usar diret√≥rio tempor√°rio
if [ -z "$CI_DERIVED_DATA_PATH" ]; then
    CI_DERIVED_DATA_PATH="/tmp/xcode_cloud_fallback"
    echo "‚ö†Ô∏è CI_DERIVED_DATA_PATH n√£o definido, usando: $CI_DERIVED_DATA_PATH"
    mkdir -p "$CI_DERIVED_DATA_PATH"
fi

# Definir BUILD_NUMBER no ambiente
echo "export BUILD_NUMBER=$BUILD_NUMBER" >> "$CI_DERIVED_DATA_PATH/environment.sh"

# Verificar se as vari√°veis de ambiente necess√°rias est√£o definidas
check_env_var() {
    local var_name=$1
    local var_value=$(eval echo \$$var_name)
    
    if [ -z "$var_value" ]; then
        echo "‚ö†Ô∏è Vari√°vel de ambiente n√£o definida: $var_name"
        return 1
    else
        echo "‚úÖ $var_name est√° definida"
        return 0
    fi
}

# Lista de vari√°veis obrigat√≥rias baseadas no ambiente
case "$BUILD_ENVIRONMENT" in
    "Development")
        ENV_VARS="STRIPE_PUBLISHABLE_KEY_DEV SUPABASE_URL_DEV SUPABASE_ANON_KEY_DEV OPENAI_API_KEY_DEV"
        ;;
    "Staging")
        ENV_VARS="STRIPE_PUBLISHABLE_KEY_STAGING SUPABASE_URL_STAGING SUPABASE_ANON_KEY_STAGING OPENAI_API_KEY_STAGING"
        ;;
    "Production")
        ENV_VARS="STRIPE_PUBLISHABLE_KEY_PROD SUPABASE_URL_PROD SUPABASE_ANON_KEY_PROD OPENAI_API_KEY_PROD"
        ;;
esac

# Verificar vari√°veis obrigat√≥rias
missing_vars=0
for var in $ENV_VARS; do
    if ! check_env_var $var; then
        missing_vars=$((missing_vars + 1))
    fi
done

# Verificar DEVELOPMENT_TEAM_ID
if ! check_env_var "DEVELOPMENT_TEAM_ID"; then
    missing_vars=$((missing_vars + 1))
fi

if [ $missing_vars -gt 0 ]; then
    echo "‚ùå $missing_vars vari√°vel(is) de ambiente obrigat√≥ria(s) n√£o definida(s)"
    echo "üìã Configure as vari√°veis no Xcode Cloud Environment Variables"
    exit 1
fi

# Verificar estrutura do projeto
echo "üìÅ Verificando estrutura do projeto..."

# Verificar arquivos obrigat√≥rios
check_required_file() {
    local file="$1"
    if [ -f "$file" ] || [ -d "$file" ]; then
        echo "‚úÖ $file encontrado"
        return 0
    else
        echo "‚ùå $file n√£o encontrado"
        return 1
    fi
}

# Lista de arquivos obrigat√≥rios
missing_files=0
check_required_file "ManusPsiqueia.xcodeproj" || missing_files=$((missing_files + 1))
check_required_file "Package.swift" || missing_files=$((missing_files + 1))
check_required_file "ManusPsiqueia/Info.plist" || missing_files=$((missing_files + 1))
check_required_file "$CONFIG_FILE" || missing_files=$((missing_files + 1))

if [ $missing_files -gt 0 ]; then
    echo "‚ùå $missing_files arquivo(s) obrigat√≥rio(s) n√£o encontrado(s)"
    exit 1
fi

# Verificar m√≥dulos Swift Package
echo "üì¶ Verificando m√≥dulos Swift Package..."

if [ -d "Modules" ]; then
    echo "‚úÖ Diret√≥rio Modules encontrado"
    
    module_count=$(find Modules -name "Package.swift" | wc -l)
    echo "üìä $module_count m√≥dulo(s) encontrado(s)"
    
    if [ $module_count -eq 0 ]; then
        echo "‚ö†Ô∏è Nenhum m√≥dulo Swift Package encontrado"
    fi
else
    echo "‚ö†Ô∏è Diret√≥rio Modules n√£o encontrado"
fi

# Configurar permiss√µes se necess√°rio
echo "üîê Configurando permiss√µes..."
chmod +x ci_scripts/*.sh 2>/dev/null || true

# Verificar se h√° scripts adicionais
if [ -f "scripts/secrets_manager.sh" ]; then
    echo "‚úÖ Script de gest√£o de segredos encontrado"
    chmod +x scripts/secrets_manager.sh
fi

# Log de informa√ß√µes do sistema
echo "üíª Informa√ß√µes do sistema:"
echo "  - Xcode Version: $CI_XCODE_VERSION"
echo "  - macOS Version: $(sw_vers -productVersion)"
echo "  - Build Environment: $BUILD_ENVIRONMENT"
echo "  - Build Number: $BUILD_NUMBER"

# Finalizar configura√ß√£o
echo "‚úÖ Configura√ß√£o p√≥s-clone conclu√≠da com sucesso!"
echo "üöÄ Pronto para build no ambiente: $BUILD_ENVIRONMENT"

exit 0
