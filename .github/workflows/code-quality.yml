---
name: 🔧 Code Quality

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]
  workflow_dispatch:

jobs:
  swift-lint:
    name: 🔍 SwiftLint Analysis
    runs-on: macos-14
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Install SwiftLint
        run: |
          brew install swiftlint
          swiftlint version
      
      - name: 🔍 Run SwiftLint
        run: |
          swiftlint lint --reporter github-actions-logging
          swiftlint lint --reporter json > swiftlint-results.json
        continue-on-error: true
      
      - name: 📤 Upload SwiftLint Results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: swiftlint-results
          path: swiftlint-results.json

  code-formatting:
    name: 🧹 Code Formatting Check
    runs-on: macos-14
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 📊 Code Metrics
        run: |
          echo "📊 Analyzing code metrics..."
          
          # Count Swift files
          swift_files=$(find . -name "*.swift" -not -path "./.git/*" | wc -l)
          echo "Swift files: $swift_files"
          
          # Count total lines
          total_lines=$(find . -name "*.swift" -not -path "./.git/*" | xargs wc -l | tail -1 | awk '{print $1}')
          echo "Total lines of code: $total_lines"
          
          # Find large files
          echo "Files with >300 lines:"
          find . -name "*.swift" -not -path "./.git/*" -exec wc -l {} + | sort -nr | head -5
          
          echo "✅ Code metrics analysis completed"

  documentation-check:
    name: 📝 Documentation Check
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 📝 Check Documentation
        run: |
          echo "📝 Checking project documentation..."
          
          # Check for required documentation files
          docs_score=0
          total_docs=5
          
          [ -f "README.md" ] && docs_score=$((docs_score + 1)) && echo "✅ README.md found"
          [ -f "CONTRIBUTING.md" ] && docs_score=$((docs_score + 1)) && echo "✅ CONTRIBUTING.md found"
          [ -f "CHANGELOG.md" ] && docs_score=$((docs_score + 1)) && echo "✅ CHANGELOG.md found"
          [ -f "LICENSE" ] && docs_score=$((docs_score + 1)) && echo "✅ LICENSE found"
          [ -d "docs" ] && docs_score=$((docs_score + 1)) && echo "✅ docs/ directory found"
          
          percentage=$((docs_score * 100 / total_docs))
          echo "📊 Documentation score: $docs_score/$total_docs ($percentage%)"
          
          if [ $percentage -ge 80 ]; then
            echo "✅ Documentation is well maintained"
          else
            echo "⚠️ Documentation needs improvement"
          fi