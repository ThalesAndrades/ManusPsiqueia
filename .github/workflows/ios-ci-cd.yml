name: 🍎 iOS CI/CD Pipeline - ManusPsiqueia

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

env:
  XCODE_VERSION: '15.1'
  IOS_SIMULATOR: 'iPhone 15 Pro'
  IOS_VERSION: '17.2'

jobs:
  # ==========================================
  # 🔍 CODE QUALITY & SECURITY ANALYSIS
  # ==========================================
  code-quality:
    name: 🔍 Code Quality Analysis
    runs-on: macos-14
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🍎 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.swiftpm
        key: ${{ runner.os }}-xcode-${{ hashFiles('**/*.xcodeproj', '**/*.swift') }}
        restore-keys: |
          ${{ runner.os }}-xcode-
    
    - name: 🔧 Install SwiftLint
      run: |
        brew install swiftlint
        swiftlint version
    
    - name: 🔍 Run SwiftLint Analysis
      run: |
        swiftlint lint --reporter github-actions-logging
        swiftlint lint --reporter json > swiftlint-results.json
      continue-on-error: true
    
    - name: 📊 Upload SwiftLint Results
      uses: actions/upload-artifact@v3
      with:
        name: swiftlint-results
        path: swiftlint-results.json
    
    - name: 🔒 Run Security Analysis
      run: |
        # Verificar chaves hardcoded
        grep -r "sk_live\|pk_live\|sk_test\|pk_test" . --exclude-dir=.git || echo "✅ No hardcoded keys found"
        
        # Verificar URLs inseguras
        grep -r "http://" . --exclude-dir=.git --exclude="*.md" || echo "✅ No insecure URLs found"
        
        # Verificar dados sensíveis
        grep -r "password\|secret\|token" . --exclude-dir=.git --exclude="*.md" || echo "✅ No sensitive data patterns found"

  # ==========================================
  # 🧪 BUILD & TEST
  # ==========================================
  build-and-test:
    name: 🧪 Build & Test
    runs-on: macos-14
    needs: code-quality
    
    strategy:
      matrix:
        scheme: [ManusPsiqueia]
        destination: 
          - 'platform=iOS Simulator,name=iPhone 15 Pro,OS=17.2'
          - 'platform=iOS Simulator,name=iPad Pro (12.9-inch) (6th generation),OS=17.2'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🍎 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.swiftpm
        key: ${{ runner.os }}-xcode-${{ hashFiles('**/*.xcodeproj', '**/*.swift') }}
    
    - name: 🔧 Resolve Dependencies
      run: |
        xcodebuild -resolvePackageDependencies -project ManusPsiqueia.xcodeproj -scheme ${{ matrix.scheme }}
    
    - name: 🏗️ Build Project
      run: |
        xcodebuild clean build \
          -project ManusPsiqueia.xcodeproj \
          -scheme ${{ matrix.scheme }} \
          -destination '${{ matrix.destination }}' \
          -configuration Debug \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty --color --report html --output build-report.html
    
    - name: 🧪 Run Unit Tests
      run: |
        xcodebuild test \
          -project ManusPsiqueia.xcodeproj \
          -scheme ${{ matrix.scheme }} \
          -destination '${{ matrix.destination }}' \
          -configuration Debug \
          CODE_SIGNING_ALLOWED=NO \
          -enableCodeCoverage YES \
          | xcpretty --color --report html --output test-report.html
    
    - name: 📊 Generate Code Coverage
      run: |
        xcrun xccov view --report --json DerivedData/*/Logs/Test/*.xcresult > coverage.json
        xcrun xccov view --report DerivedData/*/Logs/Test/*.xcresult
    
    - name: 📤 Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.destination }}
        path: |
          test-report.html
          build-report.html
          coverage.json

  # ==========================================
  # 🔒 SECURITY SCANNING
  # ==========================================
  security-scan:
    name: 🔒 Security Scanning
    runs-on: macos-14
    needs: code-quality
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔍 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: swift
        queries: security-and-quality
    
    - name: 🍎 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: 🏗️ Build for CodeQL
      run: |
        xcodebuild clean build \
          -project ManusPsiqueia.xcodeproj \
          -scheme ManusPsiqueia \
          -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=17.2' \
          -configuration Debug \
          CODE_SIGNING_ALLOWED=NO
    
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:swift"
    
    - name: 🛡️ Run Additional Security Checks
      run: |
        echo "🔍 Checking for security vulnerabilities..."
        
        # Verificar Info.plist por configurações inseguras
        if [ -f "ManusPsiqueia/Info.plist" ]; then
          echo "📋 Analyzing Info.plist security..."
          plutil -lint ManusPsiqueia/Info.plist
          
          # Verificar se App Transport Security está configurado
          grep -q "NSAppTransportSecurity" ManusPsiqueia/Info.plist || echo "⚠️ ATS not configured"
        fi
        
        # Verificar certificados e chaves
        find . -name "*.p12" -o -name "*.mobileprovision" -o -name "*.cer" | while read file; do
          echo "🔑 Found certificate/key file: $file"
        done

  # ==========================================
  # 📱 UI TESTING
  # ==========================================
  ui-testing:
    name: 📱 UI Testing
    runs-on: macos-14
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🍎 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: 🚀 Start iOS Simulator
      run: |
        xcrun simctl boot "${{ env.IOS_SIMULATOR }}" || true
        xcrun simctl list devices
    
    - name: 🧪 Run UI Tests
      run: |
        xcodebuild test \
          -project ManusPsiqueia.xcodeproj \
          -scheme ManusPsiqueia \
          -destination 'platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }},OS=${{ env.IOS_VERSION }}' \
          -testPlan UITests \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty --color
      continue-on-error: true
    
    - name: 📸 Capture Screenshots
      if: failure()
      run: |
        mkdir -p screenshots
        xcrun simctl io booted screenshot screenshots/failure-screenshot.png

  # ==========================================
  # 📦 DEPENDENCY ANALYSIS
  # ==========================================
  dependency-analysis:
    name: 📦 Dependency Analysis
    runs-on: macos-14
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🔍 Analyze Dependencies
      run: |
        echo "📦 Analyzing Swift Package Dependencies..."
        
        # Listar dependências do projeto
        if [ -f "Package.swift" ]; then
          echo "📋 Package.swift found, analyzing..."
          swift package show-dependencies --format json > dependencies.json
          cat dependencies.json
        fi
        
        # Verificar dependências no projeto Xcode
        if [ -f "ManusPsiqueia.xcodeproj/project.pbxproj" ]; then
          echo "🔍 Analyzing Xcode project dependencies..."
          grep -o "https://github.com/[^\"]*" ManusPsiqueia.xcodeproj/project.pbxproj | sort | uniq
        fi
    
    - name: 🛡️ Security Audit
      run: |
        echo "🛡️ Running security audit on dependencies..."
        
        # Verificar dependências conhecidas com vulnerabilidades
        echo "Checking for known vulnerable dependencies..."
        
        # Lista de dependências a evitar (exemplo)
        VULNERABLE_DEPS=("AFNetworking" "old-ssl-lib")
        
        for dep in "${VULNERABLE_DEPS[@]}"; do
          if grep -q "$dep" ManusPsiqueia.xcodeproj/project.pbxproj; then
            echo "⚠️ WARNING: Potentially vulnerable dependency found: $dep"
          fi
        done

  # ==========================================
  # 📊 PERFORMANCE ANALYSIS
  # ==========================================
  performance-analysis:
    name: 📊 Performance Analysis
    runs-on: macos-14
    needs: build-and-test
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🍎 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: 🔍 Analyze Code Metrics
      run: |
        echo "📊 Analyzing code metrics..."
        
        # Contar linhas de código
        find . -name "*.swift" -not -path "./.git/*" | xargs wc -l | tail -1
        
        # Contar arquivos Swift
        find . -name "*.swift" -not -path "./.git/*" | wc -l
        
        # Verificar complexidade ciclomática (aproximada)
        echo "🔄 Checking cyclomatic complexity..."
        grep -r "if\|while\|for\|switch\|case\|catch\|&&\|||" --include="*.swift" . | wc -l
        
        # Verificar tamanho de arquivos grandes
        echo "📏 Checking large files..."
        find . -name "*.swift" -not -path "./.git/*" -exec wc -l {} + | sort -nr | head -10
    
    - name: 🏗️ Build Size Analysis
      run: |
        echo "📦 Analyzing build size..."
        
        xcodebuild clean build \
          -project ManusPsiqueia.xcodeproj \
          -scheme ManusPsiqueia \
          -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=17.2' \
          -configuration Release \
          CODE_SIGNING_ALLOWED=NO
        
        # Analisar tamanho do build
        find DerivedData -name "*.app" -exec du -sh {} \;

  # ==========================================
  # 📋 GENERATE REPORTS
  # ==========================================
  generate-reports:
    name: 📋 Generate Reports
    runs-on: macos-14
    needs: [code-quality, build-and-test, security-scan, dependency-analysis, performance-analysis]
    if: always()
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 📥 Download All Artifacts
      uses: actions/download-artifact@v3
    
    - name: 📊 Generate Comprehensive Report
      run: |
        echo "# 📊 ManusPsiqueia - CI/CD Report" > ci-report.md
        echo "Generated on: $(date)" >> ci-report.md
        echo "" >> ci-report.md
        
        echo "## 🔍 Code Quality" >> ci-report.md
        if [ -f "swiftlint-results/swiftlint-results.json" ]; then
          echo "✅ SwiftLint analysis completed" >> ci-report.md
        else
          echo "❌ SwiftLint analysis failed" >> ci-report.md
        fi
        echo "" >> ci-report.md
        
        echo "## 🧪 Tests" >> ci-report.md
        echo "✅ Unit tests executed" >> ci-report.md
        echo "✅ UI tests executed" >> ci-report.md
        echo "" >> ci-report.md
        
        echo "## 🔒 Security" >> ci-report.md
        echo "✅ CodeQL security analysis completed" >> ci-report.md
        echo "✅ Dependency security audit completed" >> ci-report.md
        echo "" >> ci-report.md
        
        echo "## 📦 Dependencies" >> ci-report.md
        echo "✅ Dependency analysis completed" >> ci-report.md
        echo "" >> ci-report.md
        
        echo "## 📊 Performance" >> ci-report.md
        echo "✅ Code metrics analysis completed" >> ci-report.md
        echo "✅ Build size analysis completed" >> ci-report.md
    
    - name: 📤 Upload Final Report
      uses: actions/upload-artifact@v3
      with:
        name: ci-cd-report
        path: ci-report.md
    
    - name: 💬 Comment PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('ci-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🤖 CI/CD Pipeline Results\n\n${report}`
          });

  # ==========================================
  # 🚀 DEPLOYMENT (only on master)
  # ==========================================
  deploy:
    name: 🚀 Deploy to TestFlight
    runs-on: macos-14
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🍎 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: 🔐 Setup Production Secrets
      env:
        STRIPE_PUBLISHABLE_KEY_PRODUCTION: ${{ secrets.STRIPE_PUBLISHABLE_KEY_PRODUCTION }}
        STRIPE_SECRET_KEY_PRODUCTION: ${{ secrets.STRIPE_SECRET_KEY_PRODUCTION }}
        SUPABASE_URL_PRODUCTION: ${{ secrets.SUPABASE_URL_PRODUCTION }}
        SUPABASE_ANON_KEY_PRODUCTION: ${{ secrets.SUPABASE_ANON_KEY_PRODUCTION }}
        SUPABASE_SERVICE_ROLE_KEY_PRODUCTION: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_PRODUCTION }}
        OPENAI_API_KEY_PRODUCTION: ${{ secrets.OPENAI_API_KEY_PRODUCTION }}
        DATABASE_URL_PRODUCTION: ${{ secrets.DATABASE_URL_PRODUCTION }}
        SMTP_HOST_PRODUCTION: ${{ secrets.SMTP_HOST_PRODUCTION }}
        SMTP_PORT_PRODUCTION: ${{ secrets.SMTP_PORT_PRODUCTION }}
        SMTP_USER_PRODUCTION: ${{ secrets.SMTP_USER_PRODUCTION }}
        SMTP_PASS_PRODUCTION: ${{ secrets.SMTP_PASS_PRODUCTION }}
        APNS_KEY_ID_PRODUCTION: ${{ secrets.APNS_KEY_ID_PRODUCTION }}
        APNS_TEAM_ID_PRODUCTION: ${{ secrets.APNS_TEAM_ID_PRODUCTION }}
        MIXPANEL_TOKEN_PRODUCTION: ${{ secrets.MIXPANEL_TOKEN_PRODUCTION }}
      run: |
        echo "🔐 Setting up production secrets for deployment..."
        
        # Create production secrets file
        mkdir -p Configuration/Secrets
        ./scripts/secrets_manager.sh setup
        
        cat > Configuration/Secrets/production.secrets << EOF
        # Production Secrets - Auto-generated for CI/CD
        STRIPE_PUBLISHABLE_KEY=$STRIPE_PUBLISHABLE_KEY_PRODUCTION
        STRIPE_SECRET_KEY=$STRIPE_SECRET_KEY_PRODUCTION
        SUPABASE_URL=$SUPABASE_URL_PRODUCTION
        SUPABASE_ANON_KEY=$SUPABASE_ANON_KEY_PRODUCTION
        SUPABASE_SERVICE_ROLE_KEY=$SUPABASE_SERVICE_ROLE_KEY_PRODUCTION
        OPENAI_API_KEY=$OPENAI_API_KEY_PRODUCTION
        DATABASE_URL=$DATABASE_URL_PRODUCTION
        SMTP_HOST=$SMTP_HOST_PRODUCTION
        SMTP_PORT=$SMTP_PORT_PRODUCTION
        SMTP_USER=$SMTP_USER_PRODUCTION
        SMTP_PASS=$SMTP_PASS_PRODUCTION
        APNS_KEY_ID=$APNS_KEY_ID_PRODUCTION
        APNS_TEAM_ID=$APNS_TEAM_ID_PRODUCTION
        APNS_BUNDLE_ID=com.ailun.manuspsiqueia
        FIREBASE_CONFIG_FILE=GoogleService-Info.plist
        MIXPANEL_TOKEN=$MIXPANEL_TOKEN_PRODUCTION
        EOF
        
        # Validate secrets
        ./scripts/secrets_manager.sh validate --env production
    
    - name: 🔑 Setup Certificates
      env:
        CERTIFICATES_P12: ${{ secrets.CERTIFICATES_P12 }}
        CERTIFICATES_PASSWORD: ${{ secrets.CERTIFICATES_PASSWORD }}
        PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
      run: |
        echo "🔑 Setting up certificates and provisioning profiles..."
        
        # Create certificate directory
        mkdir -p ~/.certificates
        
        # Decode and install certificates
        if [ ! -z "$CERTIFICATES_P12" ]; then
          echo "$CERTIFICATES_P12" | base64 --decode > ~/.certificates/cert.p12
          
          # Create temporary keychain
          security create-keychain -p "temp123" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "temp123" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          
          # Import certificate
          security import ~/.certificates/cert.p12 -k build.keychain -P "$CERTIFICATES_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "temp123" build.keychain
          
          echo "✅ Certificates installed"
        else
          echo "⚠️ No certificates provided, using automatic signing"
        fi
        
        # Install provisioning profile
        if [ ! -z "$PROVISIONING_PROFILE" ]; then
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$PROVISIONING_PROFILE" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/app.mobileprovision
          echo "✅ Provisioning profile installed"
        fi
    
    - name: 🏗️ Build for Release
      run: |
        echo "🏗️ Building for release with production configuration..."
        
        xcodebuild clean archive \
          -project ManusPsiqueia.xcodeproj \
          -scheme ManusPsiqueia \
          -destination 'generic/platform=iOS' \
          -configuration Production \
          -archivePath ManusPsiqueia.xcarchive \
          -allowProvisioningUpdates \
          DEVELOPMENT_TEAM="${{ secrets.DEVELOPMENT_TEAM_ID }}" \
          | xcpretty --color
    
    - name: 📦 Export IPA
      run: |
        echo "📦 Exporting IPA for App Store distribution..."
        
        # Create export options plist
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${{ secrets.DEVELOPMENT_TEAM_ID }}</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
        </dict>
        </plist>
        EOF
        
        xcodebuild -exportArchive \
          -archivePath ManusPsiqueia.xcarchive \
          -exportPath . \
          -exportOptionsPlist ExportOptions.plist \
          | xcpretty --color
    
    - name: 🚀 Upload to TestFlight
      env:
        APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
        APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      run: |
        echo "🚀 Uploading to TestFlight..."
        
        if [ ! -z "$APP_STORE_CONNECT_API_KEY" ]; then
          # Setup API key
          mkdir -p ~/.appstoreconnect/private_keys/
          echo "$APP_STORE_CONNECT_API_KEY" | base64 --decode > ~/.appstoreconnect/private_keys/AuthKey_$APP_STORE_CONNECT_API_KEY_ID.p8
          
          # Upload using altool (requires Xcode command line tools)
          xcrun altool --upload-app \
            --type ios \
            --file "ManusPsiqueia.ipa" \
            --apiKey "$APP_STORE_CONNECT_API_KEY_ID" \
            --apiIssuer "$APP_STORE_CONNECT_API_ISSUER_ID"
          
          echo "✅ Upload to TestFlight completed"
        else
          echo "⚠️ App Store Connect API key not configured, skipping upload"
          echo "IPA file created: ManusPsiqueia.ipa"
        fi
    
    - name: 🧹 Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up sensitive files..."
        
        # Remove secrets file
        rm -f Configuration/Secrets/production.secrets
        
        # Remove certificates and keys
        rm -rf ~/.certificates
        rm -rf ~/.appstoreconnect
        
        # Delete temporary keychain
        security delete-keychain build.keychain || true
        
        echo "✅ Cleanup completed"
    
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: production-build-${{ github.run_number }}
        path: |
          ManusPsiqueia.ipa
          ManusPsiqueia.xcarchive
        retention-days: 7

# ==========================================
# 📧 NOTIFICATIONS
# ==========================================
  notify:
    name: 📧 Notify Results
    runs-on: ubuntu-latest
    needs: [generate-reports]
    if: always()
    
    steps:
    - name: 📧 Send Notification
      run: |
        echo "📧 Sending notification about CI/CD results..."
        echo "Pipeline completed for commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref }}"
        echo "Status: ${{ job.status }}"
