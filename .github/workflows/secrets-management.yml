name: üîê Secrets Management Pipeline

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      action:
        description: 'Action to perform'
        required: true
        default: 'validate'
        type: choice
        options:
          - validate
          - audit
          - backup
          - rotate

env:
  XCODE_VERSION: '15.1'

jobs:
  # ==========================================
  # üîê SECRETS VALIDATION
  # ==========================================
  validate-secrets:
    name: üîç Validate Secrets Configuration
    runs-on: macos-14
    if: github.event.inputs.action == 'validate' || github.event.inputs.action == 'audit'
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
    
    - name: üîê Setup Secrets for ${{ github.event.inputs.environment }}
      env:
        # Staging Secrets
        STRIPE_PUBLISHABLE_KEY_STAGING: ${{ secrets.STRIPE_PUBLISHABLE_KEY_STAGING }}
        STRIPE_SECRET_KEY_STAGING: ${{ secrets.STRIPE_SECRET_KEY_STAGING }}
        SUPABASE_URL_STAGING: ${{ secrets.SUPABASE_URL_STAGING }}
        SUPABASE_ANON_KEY_STAGING: ${{ secrets.SUPABASE_ANON_KEY_STAGING }}
        SUPABASE_SERVICE_ROLE_KEY_STAGING: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_STAGING }}
        OPENAI_API_KEY_STAGING: ${{ secrets.OPENAI_API_KEY_STAGING }}
        DATABASE_URL_STAGING: ${{ secrets.DATABASE_URL_STAGING }}
        SMTP_HOST_STAGING: ${{ secrets.SMTP_HOST_STAGING }}
        SMTP_PORT_STAGING: ${{ secrets.SMTP_PORT_STAGING }}
        SMTP_USER_STAGING: ${{ secrets.SMTP_USER_STAGING }}
        SMTP_PASS_STAGING: ${{ secrets.SMTP_PASS_STAGING }}
        APNS_KEY_ID_STAGING: ${{ secrets.APNS_KEY_ID_STAGING }}
        APNS_TEAM_ID_STAGING: ${{ secrets.APNS_TEAM_ID_STAGING }}
        MIXPANEL_TOKEN_STAGING: ${{ secrets.MIXPANEL_TOKEN_STAGING }}
        
        # Production Secrets
        STRIPE_PUBLISHABLE_KEY_PRODUCTION: ${{ secrets.STRIPE_PUBLISHABLE_KEY_PRODUCTION }}
        STRIPE_SECRET_KEY_PRODUCTION: ${{ secrets.STRIPE_SECRET_KEY_PRODUCTION }}
        SUPABASE_URL_PRODUCTION: ${{ secrets.SUPABASE_URL_PRODUCTION }}
        SUPABASE_ANON_KEY_PRODUCTION: ${{ secrets.SUPABASE_ANON_KEY_PRODUCTION }}
        SUPABASE_SERVICE_ROLE_KEY_PRODUCTION: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_PRODUCTION }}
        OPENAI_API_KEY_PRODUCTION: ${{ secrets.OPENAI_API_KEY_PRODUCTION }}
        DATABASE_URL_PRODUCTION: ${{ secrets.DATABASE_URL_PRODUCTION }}
        SMTP_HOST_PRODUCTION: ${{ secrets.SMTP_HOST_PRODUCTION }}
        SMTP_PORT_PRODUCTION: ${{ secrets.SMTP_PORT_PRODUCTION }}
        SMTP_USER_PRODUCTION: ${{ secrets.SMTP_USER_PRODUCTION }}
        SMTP_PASS_PRODUCTION: ${{ secrets.SMTP_PASS_PRODUCTION }}
        APNS_KEY_ID_PRODUCTION: ${{ secrets.APNS_KEY_ID_PRODUCTION }}
        APNS_TEAM_ID_PRODUCTION: ${{ secrets.APNS_TEAM_ID_PRODUCTION }}
        MIXPANEL_TOKEN_PRODUCTION: ${{ secrets.MIXPANEL_TOKEN_PRODUCTION }}
      run: |
        echo "üîê Setting up secrets for environment: ${{ github.event.inputs.environment }}"
        
        # Create dynamic secrets file from environment variables
        mkdir -p Configuration/Secrets
        cat > Configuration/Secrets/${{ github.event.inputs.environment }}.secrets << EOF
        # Auto-generated secrets for ${{ github.event.inputs.environment }} environment
        # Generated on: $(date)
        
        # Stripe Configuration
        STRIPE_PUBLISHABLE_KEY=\${STRIPE_PUBLISHABLE_KEY_${{ github.event.inputs.environment | upper }}}
        STRIPE_SECRET_KEY=\${STRIPE_SECRET_KEY_${{ github.event.inputs.environment | upper }}}
        
        # Supabase Configuration
        SUPABASE_URL=\${SUPABASE_URL_${{ github.event.inputs.environment | upper }}}
        SUPABASE_ANON_KEY=\${SUPABASE_ANON_KEY_${{ github.event.inputs.environment | upper }}}
        SUPABASE_SERVICE_ROLE_KEY=\${SUPABASE_SERVICE_ROLE_KEY_${{ github.event.inputs.environment | upper }}}
        
        # OpenAI Configuration
        OPENAI_API_KEY=\${OPENAI_API_KEY_${{ github.event.inputs.environment | upper }}}
        
        # Database Configuration
        DATABASE_URL=\${DATABASE_URL_${{ github.event.inputs.environment | upper }}}
        
        # Email Configuration
        SMTP_HOST=\${SMTP_HOST_${{ github.event.inputs.environment | upper }}}
        SMTP_PORT=\${SMTP_PORT_${{ github.event.inputs.environment | upper }}}
        SMTP_USER=\${SMTP_USER_${{ github.event.inputs.environment | upper }}}
        SMTP_PASS=\${SMTP_PASS_${{ github.event.inputs.environment | upper }}}
        
        # Push Notifications
        APNS_KEY_ID=\${APNS_KEY_ID_${{ github.event.inputs.environment | upper }}}
        APNS_TEAM_ID=\${APNS_TEAM_ID_${{ github.event.inputs.environment | upper }}}
        APNS_BUNDLE_ID=com.ailun.manuspsiqueia$([ "${{ github.event.inputs.environment }}" = "production" ] && echo "" || echo ".${{ github.event.inputs.environment }}")
        
        # Analytics
        FIREBASE_CONFIG_FILE=GoogleService-Info$([ "${{ github.event.inputs.environment }}" = "production" ] && echo "" || echo "-${{ github.event.inputs.environment }}").plist
        MIXPANEL_TOKEN=\${MIXPANEL_TOKEN_${{ github.event.inputs.environment | upper }}}
        EOF
        
        # Substitute environment variables
        envsubst < Configuration/Secrets/${{ github.event.inputs.environment }}.secrets > Configuration/Secrets/${{ github.event.inputs.environment }}.secrets.tmp
        mv Configuration/Secrets/${{ github.event.inputs.environment }}.secrets.tmp Configuration/Secrets/${{ github.event.inputs.environment }}.secrets
    
    - name: üîç Validate Secrets Configuration
      run: |
        echo "üîç Validating secrets configuration..."
        ./scripts/secrets_manager.sh validate --env ${{ github.event.inputs.environment }}
    
    - name: üîç Run Security Audit
      if: github.event.inputs.action == 'audit'
      run: |
        echo "üîç Running security audit..."
        ./scripts/secrets_manager.sh audit --env ${{ github.event.inputs.environment }}
    
    - name: üîí Verify Secret Values
      run: |
        echo "üîí Verifying that secrets are not empty..."
        
        # Check critical secrets
        CRITICAL_SECRETS=(
          "STRIPE_PUBLISHABLE_KEY_${{ github.event.inputs.environment | upper }}"
          "SUPABASE_URL_${{ github.event.inputs.environment | upper }}"
          "OPENAI_API_KEY_${{ github.event.inputs.environment | upper }}"
        )
        
        for secret in "${CRITICAL_SECRETS[@]}"; do
          if [ -z "${!secret}" ]; then
            echo "‚ùå Critical secret $secret is not set"
            exit 1
          else
            echo "‚úÖ $secret is configured"
          fi
        done
    
    - name: üìä Generate Secrets Report
      run: |
        echo "# üîê Secrets Management Report" > secrets-report.md
        echo "**Environment:** ${{ github.event.inputs.environment }}" >> secrets-report.md
        echo "**Date:** $(date)" >> secrets-report.md
        echo "**Action:** ${{ github.event.inputs.action }}" >> secrets-report.md
        echo "**Triggered by:** ${{ github.actor }}" >> secrets-report.md
        echo "" >> secrets-report.md
        
        echo "## Validation Results" >> secrets-report.md
        if ./scripts/secrets_manager.sh validate --env ${{ github.event.inputs.environment }} > validation.log 2>&1; then
          echo "‚úÖ All secrets validated successfully" >> secrets-report.md
        else
          echo "‚ùå Validation failed - check logs" >> secrets-report.md
        fi
        
        echo "" >> secrets-report.md
        echo "## Configured Secrets" >> secrets-report.md
        ./scripts/secrets_manager.sh list --env ${{ github.event.inputs.environment }} >> secrets-report.md
    
    - name: üì§ Upload Secrets Report
      uses: actions/upload-artifact@v3
      with:
        name: secrets-report-${{ github.event.inputs.environment }}
        path: |
          secrets-report.md
          validation.log

  # ==========================================
  # üíæ SECRETS BACKUP
  # ==========================================
  backup-secrets:
    name: üíæ Backup Secrets
    runs-on: macos-14
    if: github.event.inputs.action == 'backup'
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
    
    - name: üîê Setup Secrets for Backup
      env:
        # Same environment variables as validation job
        STRIPE_PUBLISHABLE_KEY_STAGING: ${{ secrets.STRIPE_PUBLISHABLE_KEY_STAGING }}
        STRIPE_SECRET_KEY_STAGING: ${{ secrets.STRIPE_SECRET_KEY_STAGING }}
        SUPABASE_URL_STAGING: ${{ secrets.SUPABASE_URL_STAGING }}
        SUPABASE_ANON_KEY_STAGING: ${{ secrets.SUPABASE_ANON_KEY_STAGING }}
        OPENAI_API_KEY_STAGING: ${{ secrets.OPENAI_API_KEY_STAGING }}
        STRIPE_PUBLISHABLE_KEY_PRODUCTION: ${{ secrets.STRIPE_PUBLISHABLE_KEY_PRODUCTION }}
        STRIPE_SECRET_KEY_PRODUCTION: ${{ secrets.STRIPE_SECRET_KEY_PRODUCTION }}
        SUPABASE_URL_PRODUCTION: ${{ secrets.SUPABASE_URL_PRODUCTION }}
        SUPABASE_ANON_KEY_PRODUCTION: ${{ secrets.SUPABASE_ANON_KEY_PRODUCTION }}
        OPENAI_API_KEY_PRODUCTION: ${{ secrets.OPENAI_API_KEY_PRODUCTION }}
      run: |
        echo "üíæ Creating backup for environment: ${{ github.event.inputs.environment }}"
        
        # Create secrets file (same logic as validation)
        mkdir -p Configuration/Secrets
        # ... (same setup logic as validation job)
    
    - name: üíæ Create Encrypted Backup
      run: |
        echo "üíæ Creating encrypted backup..."
        ./scripts/secrets_manager.sh backup --env ${{ github.event.inputs.environment }}
    
    - name: üì§ Upload Backup Artifact
      uses: actions/upload-artifact@v3
      with:
        name: secrets-backup-${{ github.event.inputs.environment }}-${{ github.run_number }}
        path: Configuration/Secrets/backups/
        retention-days: 30

  # ==========================================
  # üîÑ SECRETS ROTATION
  # ==========================================
  rotate-secrets:
    name: üîÑ Rotate Secrets
    runs-on: macos-14
    if: github.event.inputs.action == 'rotate'
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
    
    - name: ‚ö†Ô∏è Rotation Warning
      run: |
        echo "‚ö†Ô∏è SECRET ROTATION INITIATED"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Initiated by: ${{ github.actor }}"
        echo "Time: $(date)"
        echo ""
        echo "This is a critical operation that should only be performed"
        echo "when secrets have been compromised or as part of regular"
        echo "security maintenance."
        
        # In a real scenario, this would trigger notifications
        # to security team and require additional approvals

  # ==========================================
  # üìä COMPREHENSIVE REPORT
  # ==========================================
  generate-security-report:
    name: üìä Generate Security Report
    runs-on: macos-14
    needs: [validate-secrets]
    if: always()
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
    
    - name: üì• Download All Reports
      uses: actions/download-artifact@v3
    
    - name: üìä Generate Comprehensive Security Report
      run: |
        echo "# üîê ManusPsiqueia - Security & Secrets Management Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "Environment: ${{ github.event.inputs.environment }}" >> security-report.md
        echo "Action: ${{ github.event.inputs.action }}" >> security-report.md
        echo "Triggered by: ${{ github.actor }}" >> security-report.md
        echo "" >> security-report.md
        
        echo "## üîê Secrets Management Status" >> security-report.md
        if [ -f "secrets-report-${{ github.event.inputs.environment }}/secrets-report.md" ]; then
          cat "secrets-report-${{ github.event.inputs.environment }}/secrets-report.md" >> security-report.md
        else
          echo "‚ùå Secrets report not available" >> security-report.md
        fi
        
        echo "" >> security-report.md
        echo "## üõ°Ô∏è Security Recommendations" >> security-report.md
        echo "- ‚úÖ Regular secrets rotation (quarterly)" >> security-report.md
        echo "- ‚úÖ Monitor access to GitHub Secrets" >> security-report.md
        echo "- ‚úÖ Use different secrets for each environment" >> security-report.md
        echo "- ‚úÖ Enable two-factor authentication for all team members" >> security-report.md
        echo "- ‚úÖ Regular security audits" >> security-report.md
        
        echo "" >> security-report.md
        echo "## üìã Next Steps" >> security-report.md
        echo "1. Review this report with the security team" >> security-report.md
        echo "2. Address any identified issues" >> security-report.md
        echo "3. Schedule next audit in 30 days" >> security-report.md
    
    - name: üì§ Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security-report-${{ github.run_number }}
        path: security-report.md
    
    - name: üí¨ Post Security Summary
      if: github.event_name == 'workflow_dispatch'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('security-report.md')) {
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            // Create an issue with the security report
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üîê Security Report - ${new Date().toISOString().split('T')[0]}`,
              body: `## Automated Security Report\n\n${report}`,
              labels: ['security', 'secrets-management', 'automated']
            });
          }

# ==========================================
# üö® EMERGENCY PROCEDURES
# ==========================================
  emergency-lockdown:
    name: üö® Emergency Lockdown
    runs-on: ubuntu-latest
    if: false # Only enable in emergency situations
    
    steps:
    - name: üö® EMERGENCY LOCKDOWN ACTIVATED
      run: |
        echo "üö® EMERGENCY LOCKDOWN ACTIVATED"
        echo "All secrets access is being revoked"
        echo "This should only be used in case of security breach"
        # In real scenario, this would:
        # 1. Revoke all API keys
        # 2. Disable all CI/CD pipelines
        # 3. Alert security team
        # 4. Create incident report