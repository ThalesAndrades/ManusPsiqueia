name: 🚀 Automated Deployment

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests before deployment'
        required: false
        default: false
        type: boolean

env:
  XCODE_VERSION: '15.1'
  IOS_VERSION: '17.2'

jobs:
  # ==========================================
  # 🔍 PRE-DEPLOYMENT VALIDATION
  # ==========================================
  pre-deployment:
    name: 🔍 Pre-Deployment Validation
    runs-on: macos-14
    outputs:
      should_deploy: ${{ steps.validation.outputs.should_deploy }}
      version: ${{ steps.version.outputs.version }}
      build_number: ${{ steps.version.outputs.build_number }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔍 Validate Branch
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/master" ]] || [[ "${{ github.ref }}" == refs/tags/* ]]; then
          echo "✅ Valid branch/tag for deployment"
        else
          echo "❌ Invalid branch for deployment"
          exit 1
        fi
    
    - name: 📋 Extract Version Info
      id: version
      run: |
        # Extrair versão do Info.plist
        VERSION=$(plutil -extract CFBundleShortVersionString raw ManusPsiqueia/Info.plist)
        BUILD=$(plutil -extract CFBundleVersion raw ManusPsiqueia/Info.plist)
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build_number=$BUILD" >> $GITHUB_OUTPUT
        echo "📱 App Version: $VERSION ($BUILD)"
    
    - name: ✅ Validation Result
      id: validation
      run: |
        if [ "${{ inputs.skip_tests }}" == "true" ]; then
          echo "⚠️ Skipping tests as requested"
          echo "should_deploy=true" >> $GITHUB_OUTPUT
        else
          echo "🧪 Tests will be required before deployment"
          echo "should_deploy=false" >> $GITHUB_OUTPUT
        fi

  # ==========================================
  # 🧪 DEPLOYMENT TESTS
  # ==========================================
  deployment-tests:
    name: 🧪 Deployment Tests
    runs-on: macos-14
    needs: pre-deployment
    if: needs.pre-deployment.outputs.should_deploy == 'false'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🍎 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.swiftpm
        key: ${{ runner.os }}-deployment-${{ hashFiles('**/*.xcodeproj', '**/Package.swift') }}
    
    - name: 🔧 Resolve Dependencies
      run: |
        xcodebuild -resolvePackageDependencies \
          -project ManusPsiqueia.xcodeproj \
          -scheme ManusPsiqueia
    
    - name: 🧪 Run Critical Tests
      run: |
        xcodebuild test \
          -project ManusPsiqueia.xcodeproj \
          -scheme ManusPsiqueia \
          -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=${{ env.IOS_VERSION }}' \
          -configuration Release \
          CODE_SIGNING_ALLOWED=NO \
          -enableCodeCoverage YES \
          | xcpretty --color
    
    - name: 🔒 Security Validation
      run: |
        echo "🔍 Running security checks..."
        
        # Verificar se não há chaves hardcoded
        if grep -r "sk_live\|pk_live\|sk_test\|pk_test" ManusPsiqueia/ --exclude-dir=.git; then
          echo "❌ Found potential API keys in code"
          exit 1
        fi
        
        # Verificar configurações de segurança
        if ! grep -q "NSAppTransportSecurity" ManusPsiqueia/Info.plist; then
          echo "⚠️ App Transport Security not configured"
        fi
        
        echo "✅ Security validation passed"

  # ==========================================
  # 🏗️ BUILD FOR DISTRIBUTION
  # ==========================================
  build-distribution:
    name: 🏗️ Build for Distribution
    runs-on: macos-14
    needs: [pre-deployment, deployment-tests]
    if: always() && (needs.pre-deployment.outputs.should_deploy == 'true' || needs.deployment-tests.result == 'success')
    
    strategy:
      matrix:
        configuration: [Release]
        destination: ['generic/platform=iOS']
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🍎 Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: 📦 Restore Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.swiftpm
        key: ${{ runner.os }}-deployment-${{ hashFiles('**/*.xcodeproj', '**/Package.swift') }}
    
    - name: 🔧 Configure Build Settings
      run: |
        # Configurar número de build baseado no timestamp
        BUILD_NUMBER=$(date +%Y%m%d%H%M)
        plutil -replace CFBundleVersion -string "$BUILD_NUMBER" ManusPsiqueia/Info.plist
        echo "📱 Build Number: $BUILD_NUMBER"
    
    - name: 🏗️ Build Archive
      run: |
        xcodebuild archive \
          -project ManusPsiqueia.xcodeproj \
          -scheme ManusPsiqueia \
          -destination '${{ matrix.destination }}' \
          -configuration ${{ matrix.configuration }} \
          -archivePath ManusPsiqueia.xcarchive \
          CODE_SIGNING_ALLOWED=NO \
          | xcpretty --color
    
    - name: 📦 Create IPA (Simulation)
      run: |
        # Simular criação de IPA (sem certificados reais)
        echo "📦 Creating distribution package..."
        mkdir -p dist
        
        # Copiar arquivos importantes para distribuição
        cp -r ManusPsiqueia.xcarchive dist/
        
        # Criar manifesto de build
        cat > dist/build-manifest.json << EOF
        {
          "version": "${{ needs.pre-deployment.outputs.version }}",
          "build": "$(date +%Y%m%d%H%M)",
          "configuration": "${{ matrix.configuration }}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "commit": "${{ github.sha }}",
          "branch": "${{ github.ref_name }}"
        }
        EOF
        
        echo "✅ Distribution package created"
    
    - name: 📤 Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: distribution-${{ matrix.configuration }}
        path: |
          dist/
          ManusPsiqueia.xcarchive
        retention-days: 30

  # ==========================================
  # 🚀 DEPLOY TO STAGING
  # ==========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: macos-14
    needs: [pre-deployment, build-distribution]
    if: github.ref == 'refs/heads/master' || inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: distribution-Release
        path: dist/
    
    - name: 🚀 Deploy to TestFlight (Simulation)
      run: |
        echo "🚀 Deploying to TestFlight..."
        echo "📱 Version: ${{ needs.pre-deployment.outputs.version }}"
        echo "🏗️ Build: $(cat dist/build-manifest.json | grep build | cut -d'"' -f4)"
        
        # Simular upload para TestFlight
        echo "✅ Successfully uploaded to TestFlight (Internal Testing)"
        
        # Simular notificação para testadores
        echo "📧 Notifying internal testers..."
        echo "✅ Internal testers notified"
    
    - name: 📊 Update Deployment Status
      run: |
        echo "## 🚀 Staging Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ needs.pre-deployment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build:** $(cat dist/build-manifest.json | grep build | cut -d'"' -f4)" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** Staging (TestFlight Internal)" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ✅ Deployed Successfully" >> $GITHUB_STEP_SUMMARY

  # ==========================================
  # 🏭 DEPLOY TO PRODUCTION
  # ==========================================
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: macos-14
    needs: [pre-deployment, build-distribution]
    if: startsWith(github.ref, 'refs/tags/v') || inputs.environment == 'production'
    environment: production
    
    steps:
    - name: 📥 Download Build Artifacts
      uses: actions/download-artifact@v3
      with:
        name: distribution-Release
        path: dist/
    
    - name: 🔍 Production Validation
      run: |
        echo "🔍 Running production validation..."
        
        # Verificar se é uma tag de versão válida
        if [[ "${{ github.ref }}" =~ ^refs/tags/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "✅ Valid version tag"
        elif [ "${{ inputs.environment }}" == "production" ]; then
          echo "⚠️ Manual production deployment"
        else
          echo "❌ Invalid version tag for production"
          exit 1
        fi
    
    - name: 🏭 Deploy to App Store (Simulation)
      run: |
        echo "🏭 Deploying to App Store..."
        echo "📱 Version: ${{ needs.pre-deployment.outputs.version }}"
        echo "🏗️ Build: $(cat dist/build-manifest.json | grep build | cut -d'"' -f4)"
        
        # Simular upload para App Store
        echo "✅ Successfully uploaded to App Store Connect"
        
        # Simular submissão para revisão
        echo "📋 Submitting for App Store Review..."
        echo "✅ Submitted for review"
    
    - name: 🎉 Production Deployment Complete
      run: |
        echo "## 🎉 Production Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ needs.pre-deployment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Build:** $(cat dist/build-manifest.json | grep build | cut -d'"' -f4)" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** Production (App Store)" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ✅ Submitted for Review" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎯 **Next Steps:**" >> $GITHUB_STEP_SUMMARY
        echo "- Monitor App Store Connect for review status" >> $GITHUB_STEP_SUMMARY
        echo "- Prepare release notes for users" >> $GITHUB_STEP_SUMMARY
        echo "- Monitor crash reports and user feedback" >> $GITHUB_STEP_SUMMARY

  # ==========================================
  # 📊 DEPLOYMENT SUMMARY
  # ==========================================
  deployment-summary:
    name: 📊 Deployment Summary
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 📊 Generate Summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch/Tag:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ needs.pre-deployment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
          echo "✅ **Staging:** Deployed Successfully" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.deploy-staging.result }}" == "skipped" ]; then
          echo "⏭️ **Staging:** Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Staging:** Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "✅ **Production:** Deployed Successfully" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.deploy-production.result }}" == "skipped" ]; then
          echo "⏭️ **Production:** Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Production:** Failed" >> $GITHUB_STEP_SUMMARY
        fi
