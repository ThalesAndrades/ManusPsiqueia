name: üß™ Automated Testing & Coverage

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

env:
  XCODE_VERSION: '15.1'
  IOS_SIMULATOR: 'iPhone 15 Pro'
  IOS_VERSION: '17.2'

jobs:
  # ==========================================
  # üß™ UNIT TESTS WITH COVERAGE
  # ==========================================
  unit-tests:
    name: üß™ Unit Tests & Coverage
    runs-on: macos-14
    
    strategy:
      matrix:
        scheme: [ManusPsiqueia]
        destination: 
          - 'platform=iOS Simulator,name=iPhone 15 Pro,OS=17.2'
          - 'platform=iOS Simulator,name=iPhone 15,OS=17.2'
          - 'platform=iOS Simulator,name=iPad Pro (12.9-inch) (6th generation),OS=17.2'
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: üçé Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: üì¶ Cache Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.swiftpm
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-xcode-${{ hashFiles('**/*.xcodeproj', '**/Package.swift', '**/*.swift') }}
        restore-keys: |
          ${{ runner.os }}-xcode-
    
    - name: üîß Resolve Dependencies
      run: |
        xcodebuild -resolvePackageDependencies \
          -project ManusPsiqueia.xcodeproj \
          -scheme ${{ matrix.scheme }}
    
    - name: üèóÔ∏è Build for Testing
      run: |
        xcodebuild build-for-testing \
          -project ManusPsiqueia.xcodeproj \
          -scheme ${{ matrix.scheme }} \
          -destination '${{ matrix.destination }}' \
          -configuration Debug \
          CODE_SIGNING_ALLOWED=NO \
          -derivedDataPath DerivedData \
          | xcpretty --color
    
    - name: üß™ Run Unit Tests
      run: |
        xcodebuild test-without-building \
          -project ManusPsiqueia.xcodeproj \
          -scheme ${{ matrix.scheme }} \
          -destination '${{ matrix.destination }}' \
          -configuration Debug \
          CODE_SIGNING_ALLOWED=NO \
          -derivedDataPath DerivedData \
          -enableCodeCoverage YES \
          -resultBundlePath TestResults.xcresult \
          | xcpretty --color --report junit --output test-results.xml
    
    - name: üìä Generate Coverage Report
      run: |
        # Gerar relat√≥rio de cobertura em JSON
        xcrun xccov view --report --json TestResults.xcresult > coverage.json
        
        # Gerar relat√≥rio de cobertura em texto
        xcrun xccov view --report TestResults.xcresult > coverage.txt
        
        # Extrair percentual de cobertura
        COVERAGE=$(xcrun xccov view --report TestResults.xcresult | grep -E "^\s*[0-9]+\.[0-9]+%" | head -1 | awk '{print $1}')
        echo "COVERAGE_PERCENTAGE=$COVERAGE" >> $GITHUB_ENV
        echo "üìä Code Coverage: $COVERAGE"
        
        # Gerar relat√≥rio detalhado por arquivo
        xcrun xccov view --file-list TestResults.xcresult > coverage-files.txt
    
    - name: üìà Coverage Summary
      run: |
        echo "## üìä Code Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Overall Coverage:** ${{ env.COVERAGE_PERCENTAGE }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Coverage Details" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        head -20 coverage.txt >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
    
    - name: üì§ Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.scheme }}-${{ strategy.job-index }}
        path: |
          test-results.xml
          coverage.json
          coverage.txt
          coverage-files.txt
          TestResults.xcresult
    
    - name: üìä Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results (${{ matrix.destination }})
        path: test-results.xml
        reporter: java-junit
        fail-on-error: true
    
    - name: ‚ö†Ô∏è Coverage Threshold Check
      run: |
        # Extrair apenas o n√∫mero da porcentagem
        COVERAGE_NUM=$(echo "${{ env.COVERAGE_PERCENTAGE }}" | sed 's/%//')
        
        # Definir threshold m√≠nimo (70%)
        THRESHOLD=70
        
        if (( $(echo "$COVERAGE_NUM < $THRESHOLD" | bc -l) )); then
          echo "‚ùå Coverage ${{ env.COVERAGE_PERCENTAGE }} is below threshold ($THRESHOLD%)"
          echo "::warning::Code coverage ${{ env.COVERAGE_PERCENTAGE }} is below the required threshold of $THRESHOLD%"
        else
          echo "‚úÖ Coverage ${{ env.COVERAGE_PERCENTAGE }} meets threshold ($THRESHOLD%)"
        fi

  # ==========================================
  # üéØ UI TESTS
  # ==========================================
  ui-tests:
    name: üéØ UI Tests
    runs-on: macos-14
    needs: unit-tests
    
    strategy:
      matrix:
        scheme: [ManusPsiqueia]
        destination: 
          - 'platform=iOS Simulator,name=iPhone 15 Pro,OS=17.2'
          - 'platform=iOS Simulator,name=iPad Pro (12.9-inch) (6th generation),OS=17.2'
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
    
    - name: üçé Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: ${{ env.XCODE_VERSION }}
    
    - name: üì¶ Restore Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.swiftpm
        key: ${{ runner.os }}-xcode-${{ hashFiles('**/*.xcodeproj', '**/Package.swift', '**/*.swift') }}
        restore-keys: |
          ${{ runner.os }}-xcode-
    
    - name: üîß Resolve Dependencies
      run: |
        xcodebuild -resolvePackageDependencies \
          -project ManusPsiqueia.xcodeproj \
          -scheme ${{ matrix.scheme }}
    
    - name: üèóÔ∏è Build for UI Testing
      run: |
        xcodebuild build-for-testing \
          -project ManusPsiqueia.xcodeproj \
          -scheme ${{ matrix.scheme }} \
          -destination '${{ matrix.destination }}' \
          -configuration Debug \
          CODE_SIGNING_ALLOWED=NO \
          -derivedDataPath DerivedData \
          | xcpretty --color
    
    - name: üéØ Run UI Tests
      run: |
        xcodebuild test-without-building \
          -project ManusPsiqueia.xcodeproj \
          -scheme ${{ matrix.scheme }} \
          -destination '${{ matrix.destination }}' \
          -configuration Debug \
          CODE_SIGNING_ALLOWED=NO \
          -derivedDataPath DerivedData \
          -only-testing:ManusPsiqueiaUITests \
          -resultBundlePath UITestResults.xcresult \
          | xcpretty --color --report junit --output ui-test-results.xml
    
    - name: üì§ Upload UI Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: ui-test-results-${{ strategy.job-index }}
        path: |
          ui-test-results.xml
          UITestResults.xcresult
    
    - name: üìä Publish UI Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: UI Test Results (${{ matrix.destination }})
        path: ui-test-results.xml
        reporter: java-junit
        fail-on-error: false

  # ==========================================
  # üìä COVERAGE CONSOLIDATION
  # ==========================================
  coverage-report:
    name: üìä Coverage Consolidation
    runs-on: macos-14
    needs: [unit-tests]
    if: always()
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
    
    - name: üì• Download All Artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: üìä Consolidate Coverage
      run: |
        echo "# üìä Test Coverage Report" > coverage-summary.md
        echo "" >> coverage-summary.md
        echo "## Overall Results" >> coverage-summary.md
        echo "" >> coverage-summary.md
        
        # Processar todos os arquivos de cobertura
        for coverage_file in artifacts/*/coverage.txt; do
          if [ -f "$coverage_file" ]; then
            echo "Processing: $coverage_file"
            DEVICE=$(echo "$coverage_file" | cut -d'/' -f2)
            echo "### $DEVICE" >> coverage-summary.md
            echo "\`\`\`" >> coverage-summary.md
            head -10 "$coverage_file" >> coverage-summary.md
            echo "\`\`\`" >> coverage-summary.md
            echo "" >> coverage-summary.md
          fi
        done
    
    - name: üì§ Upload Consolidated Report
      uses: actions/upload-artifact@v3
      with:
        name: consolidated-coverage-report
        path: coverage-summary.md
    
    - name: üí¨ Comment Coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('coverage-summary.md')) {
            const coverage = fs.readFileSync('coverage-summary.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverage
            });
          }

  # ==========================================
  # ‚úÖ TEST SUMMARY
  # ==========================================
  test-summary:
    name: ‚úÖ Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, ui-tests, coverage-report]
    if: always()
    
    steps:
    - name: üìä Generate Summary
      run: |
        echo "## üß™ Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.unit-tests.result }}" == "success" ]; then
          echo "‚úÖ **Unit Tests:** Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Unit Tests:** Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.ui-tests.result }}" == "success" ]; then
          echo "‚úÖ **UI Tests:** Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **UI Tests:** Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.coverage-report.result }}" == "success" ]; then
          echo "‚úÖ **Coverage Report:** Generated" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Coverage Report:** Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìà **Next Steps:**" >> $GITHUB_STEP_SUMMARY
        echo "- Review test results in the Actions tab" >> $GITHUB_STEP_SUMMARY
        echo "- Check coverage reports in artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Address any failing tests before merging" >> $GITHUB_STEP_SUMMARY
