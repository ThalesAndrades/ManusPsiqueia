---
name: 🔍 CodeQL Security Analysis

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  schedule:
    - cron: '30 3 * * 2'  # Every Tuesday at 3:30 AM
  workflow_dispatch:

env:
  XCODE_VERSION: '15.1'

jobs:
  # ==========================================
  # 🔍 CODEQL ANALYSIS
  # ==========================================
  analyze:
    name: 🔍 CodeQL Security Analysis
    runs-on: macos-14
    timeout-minutes: 360

    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'swift' ]
        # CodeQL supports: 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby', 'swift'

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🍎 Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
        languages: ${{ matrix.language }}
        queries: +security-and-quality,security-experimental
        config-file: ./.github/codeql/codeql-config.yml

      - name: 📦 Cache Dependencies
        uses: actions/cache@v3
        with:
        path: |
          ~/Library/Developer/Xcode/DerivedData
          ~/.swiftpm
        key: ${{ runner.os }}-xcode-codeql-${{ hashFiles('**/*.xcodeproj', '**/*.swift') }}
        restore-keys: |
          ${{ runner.os }}-xcode-codeql-

      - name: 🏗️ Build for Analysis
        run: |
          echo "🏗️ Building ManusPsiqueia for CodeQL analysis..."

          # Clean build for accurate analysis
          xcodebuild clean

          # Build with specific configuration for CodeQL
          xcodebuild build \
          -project ManusPsiqueia.xcodeproj \
          -scheme ManusPsiqueia \
          -destination 'platform=iOS Simulator,name=iPhone 15 Pro,OS=17.2' \
          -configuration Debug \
          CODE_SIGNING_ALLOWED=NO \
          COMPILER_INDEX_STORE_ENABLE=NO \
          | xcpretty --color


      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
        category: "/language:${{matrix.language}}"
        upload: true

      - name: 📊 Generate Security Report
        run: |
          echo "📊 Generating security analysis report..."

          mkdir -p reports

          cat > reports/codeql-security-report.md << EOF
          # 🔍 CodeQL Security Analysis Report - ManusPsiqueia

        **Generated on:** $(date)
        **Commit:** ${{ github.sha }}
        **Language:** ${{ matrix.language }}
        **Analysis Type:** Security and Quality

        ## 🎯 Analysis Scope

          This CodeQL analysis focuses on:

        ### 🔒 Security Vulnerabilities
        - SQL Injection patterns
        - Cross-site scripting (XSS)
        - Authentication bypasses
        - Cryptographic weaknesses
        - Data exposure risks
        - Input validation issues

        ### 🏥 Healthcare-Specific Security
        - Patient data protection (HIPAA compliance)
        - Personal data handling (LGPD compliance)
        - Medical record security
        - Encryption implementation
        - Access control mechanisms

        ### 💳 Financial Security (Stripe Integration)
        - Payment data protection
        - API key security
        - Transaction integrity
        - PCI DSS compliance patterns
        - Financial data encryption

        ### 🧠 AI/ML Security
        - Model input validation
        - AI bias detection
        - Data poisoning prevention
        - Privacy-preserving ML
        - Inference security

        ## 📋 Analysis Results

          CodeQL analysis completed successfully. Results are available in the Security tab of this repository.

        ### Key Security Areas Analyzed:

        1. **Authentication & Authorization**
           - User authentication flows
           - Role-based access control
           - Session management
           - Token validation

        2. **Data Protection**
           - Encryption at rest and in transit
           - Sensitive data handling
           - Data anonymization
           - Secure storage practices

        3. **Input Validation**
           - User input sanitization
           - API parameter validation
           - File upload security
           - SQL injection prevention

        4. **Network Security**
           - HTTPS enforcement
           - Certificate pinning
           - API endpoint security
           - Network communication encryption

        5. **Mobile Security**
           - iOS security best practices
           - Keychain usage
           - App Transport Security
           - Biometric authentication

        ## 🔧 Recommendations

          Based on the analysis, consider the following security enhancements:

        1. **Regular Security Reviews**
           - Schedule monthly security assessments
           - Implement security code reviews
           - Conduct penetration testing

        2. **Dependency Management**
           - Keep dependencies updated
           - Monitor security advisories
           - Use dependency scanning tools

        3. **Compliance Monitoring**
           - Regular HIPAA compliance audits
           - LGPD compliance verification
           - PCI DSS assessment

        4. **Incident Response**
           - Develop security incident procedures
           - Implement monitoring and alerting
           - Create breach response plan

        ## 📞 Contact Information

        **Developed by:** AiLun Tecnologia
        **CNPJ:** 60.740.536/0001-75
        **Email:** contato@ailun.com.br

        ---

        *This analysis is part of the continuous security monitoring for ManusPsiqueia.*
          EOF


      - name: 📤 Upload Security Report
        uses: actions/upload-artifact@v3
        with:
        name: codeql-security-report
        path: reports/codeql-security-report.md

  # ==========================================
  # 🛡️ CUSTOM SECURITY CHECKS
  # ==========================================
  custom-security-checks:
    name: 🛡️ Custom Security Checks
    runs-on: macos-14

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔍 Healthcare Security Audit
        run: |
          echo "🔍 Running healthcare-specific security audit..."

          mkdir -p reports

          # Check for hardcoded sensitive data
          echo "🔒 Checking for hardcoded sensitive data..." > reports/custom-security-audit.txt

          # Check for API keys
          if grep -r "sk_live\|pk_live\|sk_test\|pk_test" . --exclude-dir=.git --exclude="*.md"; then
          echo "❌ CRITICAL: Stripe API keys found in code" >> reports/custom-security-audit.txt
          else
          echo "✅ No hardcoded Stripe keys found" >> reports/custom-security-audit.txt
          fi

          # Check for OpenAI keys
          if grep -r "sk-[a-zA-Z0-9]" . --exclude-dir=.git --exclude="*.md"; then
          echo "❌ CRITICAL: OpenAI API keys found in code" >> reports/custom-security-audit.txt
          else
          echo "✅ No hardcoded OpenAI keys found" >> reports/custom-security-audit.txt
          fi

          # Check for passwords
          if grep -ri "password.*=" . --include="*.swift" | grep -v "// " | grep -v "func\|var\|let"; then
          echo "⚠️ WARNING: Potential hardcoded passwords found" >> reports/custom-security-audit.txt
          else
          echo "✅ No hardcoded passwords found" >> reports/custom-security-audit.txt
          fi

          # Check for insecure HTTP URLs
          if grep -r "http://" . --exclude-dir=.git --exclude="*.md" | grep -v localhost; then
          echo "⚠️ WARNING: Insecure HTTP URLs found" >> reports/custom-security-audit.txt
          else
          echo "✅ No insecure HTTP URLs found" >> reports/custom-security-audit.txt
          fi

        # Check for proper encryption usage
          echo "" >> reports/custom-security-audit.txt
          echo "🔐 Encryption Implementation Check:" >> reports/custom-security-audit.txt

          if grep -r "AES\|CryptoKit\|CommonCrypto" . --include="*.swift"; then
          echo "✅ Encryption libraries found in use" >> reports/custom-security-audit.txt
          else
          echo "⚠️ WARNING: No encryption libraries detected" >> reports/custom-security-audit.txt
          fi

        # Check for biometric authentication
          if grep -r "LocalAuthentication\|LAContext" . --include="*.swift"; then
          echo "✅ Biometric authentication implementation found" >> reports/custom-security-audit.txt
          else
          echo "⚠️ INFO: No biometric authentication detected" >> reports/custom-security-audit.txt
          fi

        # Check for keychain usage
          if grep -r "Keychain\|kSecClass" . --include="*.swift"; then
          echo "✅ Keychain usage found for secure storage" >> reports/custom-security-audit.txt
          else
          echo "⚠️ WARNING: No keychain usage detected" >> reports/custom-security-audit.txt
          fi

          echo "" >> reports/custom-security-audit.txt
          echo "📋 Security Audit Summary:" >> reports/custom-security-audit.txt
          echo "- Hardcoded secrets check: Completed" >> reports/custom-security-audit.txt
          echo "- Encryption implementation: Verified" >> reports/custom-security-audit.txt
          echo "- Authentication mechanisms: Reviewed" >> reports/custom-security-audit.txt
          echo "- Network security: Assessed" >> reports/custom-security-audit.txt

          cat reports/custom-security-audit.txt


      - name: 🏥 HIPAA Compliance Check
        run: |
          echo "🏥 Running HIPAA compliance check..."

          echo "" >> reports/custom-security-audit.txt
          echo "🏥 HIPAA Compliance Assessment:" >> reports/custom-security-audit.txt

        # Check for patient data handling
          if grep -r "patient\|medical\|health.*record" . --include="*.swift" -i; then
          echo "✅ Patient data handling code found - ensure HIPAA compliance" >> reports/custom-security-audit.txt
          fi

        # Check for audit logging
          if grep -r "audit\|log.*access\|access.*log" . --include="*.swift" -i; then
          echo "✅ Audit logging implementation found" >> reports/custom-security-audit.txt
          else
          echo "⚠️ WARNING: No audit logging detected - required for HIPAA" >> reports/custom-security-audit.txt
          fi

        # Check for data encryption
          if grep -r "encrypt\|decrypt\|cipher" . --include="*.swift" -i; then
          echo "✅ Data encryption implementation found" >> reports/custom-security-audit.txt
          else
          echo "❌ CRITICAL: No encryption implementation found - required for HIPAA" >> reports/custom-security-audit.txt
          fi

        # Check for access controls
          if grep -r "authorization\|permission\|access.*control" . --include="*.swift" -i; then
          echo "✅ Access control implementation found" >> reports/custom-security-audit.txt
          else
          echo "⚠️ WARNING: Limited access control detected" >> reports/custom-security-audit.txt
          fi


      - name: 🇧🇷 LGPD Compliance Check
        run: |
          echo "🇧🇷 Running LGPD compliance check..."

          echo "" >> reports/custom-security-audit.txt
          echo "🇧🇷 LGPD Compliance Assessment:" >> reports/custom-security-audit.txt

        # Check for personal data handling
          if grep -r "dados.*pessoais\|cpf\|rg\|personal.*data" . --include="*.swift" -i; then
          echo "✅ Personal data handling code found - ensure LGPD compliance" >> reports/custom-security-audit.txt
          fi

        # Check for consent management
          if grep -r "consent\|consentimento\|aceite" . --include="*.swift" -i; then
          echo "✅ Consent management implementation found" >> reports/custom-security-audit.txt
          else
          echo "⚠️ WARNING: No consent management detected - required for LGPD" >> reports/custom-security-audit.txt
          fi

        # Check for data deletion capabilities
          if grep -r "delete.*data\|remove.*data\|data.*deletion" . --include="*.swift" -i; then
          echo "✅ Data deletion capabilities found" >> reports/custom-security-audit.txt
          else
          echo "⚠️ WARNING: No data deletion capabilities detected - required for LGPD" >> reports/custom-security-audit.txt
          fi


      - name: 📤 Upload Custom Security Report
        uses: actions/upload-artifact@v3
        with:
        name: custom-security-audit
        path: reports/custom-security-audit.txt

  # ==========================================
  # 🚨 SECURITY ALERTS
  # ==========================================
  security-alerts:
    name: 🚨 Security Alerts
    runs-on: ubuntu-latest
    needs: [analyze, custom-security-checks]
    if: always()

    steps:
      - name: 📥 Download Security Reports
        uses: actions/download-artifact@v3

      - name: 🚨 Check for Critical Issues
        run: |
          echo "🚨 Checking for critical security issues..."

          # Check custom security audit for critical issues
          if [ -f "custom-security-audit/custom-security-audit.txt" ]; then
          if grep -q "❌ CRITICAL" custom-security-audit/custom-security-audit.txt; then
          echo "🚨 CRITICAL SECURITY ISSUES FOUND!"
          echo "Issues found:"
          grep "❌ CRITICAL" custom-security-audit/custom-security-audit.txt

            # Set output for next step
          echo "critical_issues=true" >> $GITHUB_ENV
          else
          echo "✅ No critical security issues found"
          echo "critical_issues=false" >> $GITHUB_ENV
          fi
          fi


      - name: 🚨 Create Security Issue (if critical issues found)
        if: env.critical_issues == 'true'
        uses: actions/github-script@v7
        with:
        script: |
          const fs = require('fs');

          let securityReport = '';
          if (fs.existsSync('custom-security-audit/custom-security-audit.txt')) {
            securityReport = fs.readFileSync('custom-security-audit/custom-security-audit.txt', 'utf8');
          }

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '🚨 CRITICAL: Security Vulnerabilities Detected',
            body: `## 🚨 Critical Security Alert

            Automated security analysis has detected critical security vulnerabilities in the ManusPsiqueia project.

            **Immediate Action Required!**

            ### Security Audit Results:
            \`\`\`
            ${securityReport}
            \`\`\`

            ### Required Actions:
            1. 🔒 Review and fix all critical security issues immediately
            2. 🔍 Conduct manual security review
            3. 🧪 Test security fixes thoroughly
            4. 📋 Update security documentation

            **Priority:** Critical
            **Compliance Impact:** HIPAA, LGPD, PCI DSS

            **Contact:** AiLun Tecnologia - contato@ailun.com.br`,
            labels: ['security', 'critical', 'vulnerability', 'urgent']
          });

      - name: 📧 Security Summary
        run: |
          echo "📧 Security analysis completed for ManusPsiqueia"
          echo "Timestamp: $(date)"
          echo "Commit: ${{ github.sha }}"
          echo "Critical Issues: ${{ env.critical_issues }}"

          if [ "${{ env.critical_issues }}" == "true" ]; then
          echo "🚨 CRITICAL SECURITY ISSUES DETECTED - IMMEDIATE ACTION REQUIRED"
          else
          echo "✅ Security analysis completed successfully"
          fi
