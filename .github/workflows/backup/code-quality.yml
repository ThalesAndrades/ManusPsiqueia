---
name: 🔧 Code Quality & Auto-Fix

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM
  workflow_dispatch:

env:
  XCODE_VERSION: '15.1'

jobs:
  # ==========================================
  # 🔍 SWIFTLINT ANALYSIS & AUTO-FIX
  # ==========================================
  swiftlint-analysis:
    name: 🔍 SwiftLint Analysis & Auto-Fix
    runs-on: macos-14

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🍎 Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: 🔧 Install SwiftLint
        run: |
          brew install swiftlint
          swiftlint version


      - name: 🔍 Run SwiftLint Analysis
        run: |
          echo "🔍 Running SwiftLint analysis..."

          # Create reports directory
          mkdir -p reports

          # Run SwiftLint with different reporters
          swiftlint lint --reporter json > reports/swiftlint-results.json || true
          swiftlint lint --reporter html > reports/swiftlint-results.html || true
          swiftlint lint --reporter github-actions-logging || true

          # Generate summary
          echo "📊 SwiftLint Summary:" > reports/swiftlint-summary.txt
          echo "Warnings: $(jq '[.[] | select(.severity == "warning")] | length' reports/swiftlint-results.json)" >> reports/swiftlint-summary.txt
          echo "Errors: $(jq '[.[] | select(.severity == "error")] | length' reports/swiftlint-results.json)" >> reports/swiftlint-summary.txt
          echo "Total Issues: $(jq 'length' reports/swiftlint-results.json)" >> reports/swiftlint-summary.txt


      - name: 🔧 Auto-Fix SwiftLint Issues
        run: |
          echo "🔧 Auto-fixing SwiftLint issues..."

          # Run SwiftLint autocorrect
          swiftlint autocorrect --format

          # Check if any files were modified
          if git diff --quiet; then
          echo "✅ No auto-fixable issues found"
          else
          echo "🔧 Auto-fixed issues found, creating commit..."

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add and commit changes
          git add .
          git commit -m "🔧 Auto-fix SwiftLint issues

          - Applied SwiftLint autocorrect
          - Fixed formatting issues
          - Improved code quality

          Generated by: GitHub Actions
          Workflow: Code Quality & Auto-Fix"

          # Push changes (only if not a PR from fork)
          if [ "${{ github.event_name }}" != "pull_request" ] || [ "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.repository }}" ]; then
          git push
          fi
          fi


      - name: 📊 Generate Quality Report
        run: |
          echo "📊 Generating code quality report..."

          cat > reports/quality-report.md << EOF
          # 🔧 Code Quality Report - ManusPsiqueia

        **Generated on:** $(date)
        **Commit:** ${{ github.sha }}
        **Branch:** ${{ github.ref }}

        ## 📊 SwiftLint Analysis Results

        $(cat reports/swiftlint-summary.txt)

        ## 🔧 Auto-Fix Results

          EOF

          if git diff --quiet HEAD~1; then
          echo "✅ No auto-fixable issues were found" >> reports/quality-report.md
          else
          echo "🔧 Auto-fixed issues were applied and committed" >> reports/quality-report.md
          echo "" >> reports/quality-report.md
          echo "### Changes Made:" >> reports/quality-report.md
          echo "\`\`\`" >> reports/quality-report.md
          git diff --name-only HEAD~1 >> reports/quality-report.md
          echo "\`\`\`" >> reports/quality-report.md
          fi

          cat >> reports/quality-report.md << EOF

        ## 🎯 Quality Metrics

        - **Code Coverage:** Target 80%+
        - **Cyclomatic Complexity:** Max 10 per function
        - **File Length:** Max 500 lines
        - **Function Length:** Max 50 lines

        ## 🔧 Recommendations

        1. Address remaining SwiftLint warnings
        2. Increase test coverage
        3. Refactor complex functions
        4. Add documentation for public APIs

        **Developed by:** AiLun Tecnologia
        **CNPJ:** 60.740.536/0001-75
          EOF


      - name: 📤 Upload Quality Reports
        uses: actions/upload-artifact@v3
        with:
        name: code-quality-reports
        path: reports/

  # ==========================================
  # 🧹 CODE FORMATTING
  # ==========================================
  code-formatting:
    name: 🧹 Code Formatting
    runs-on: macos-14

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
        token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🍎 Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: 🔧 Install SwiftFormat
        run: |
          brew install swiftformat
          swiftformat --version


      - name: 🧹 Format Swift Code
        run: |
          echo "🧹 Formatting Swift code..."

          # Run SwiftFormat with custom rules
          swiftformat . \
          --indent 4 \
          --indentcase false \
          --trimwhitespace always \
          --insertlines true \
          --removelines true \
          --allman false \
          --wraparguments beforefirst \
          --wrapparameters beforefirst \
          --wrapcollections beforefirst \
          --closingparen balanced \
          --funcattributes prevline \
          --typeattributes prevline \
          --varattributes prevline \
          --storedvarattributes prevline \
          --computedvarattributes prevline \
          --guardelse nextline \
          --elseposition nextline \
          --empty void \
          --trailingclosures \
          --stripunusedargs closure-only \
          --self remove \
          --importgrouping testable-bottom \
          --commas always \
          --semicolons never \
          --ranges spaced \
          --specifiers \
          --redundanttype inferred \
          --redundantclosure \
          --redundantget \
          --redundantinit \
          --redundantlet \
          --redundantletinit \
          --redundantnil \
          --redundantparens \
          --redundantpattern \
          --redundantrawvalues \
          --redundantreturn \
          --redundantself \
          --redundantvoidreturntype \
          --redundantbackticks \
          --redundantbreak \
          --redundantextensionacl \
          --redundantfileprivate \
          --redundantobjc \
          --sortedimports \
          --sortedcases \
          --unusedarguments \
          --void \
          --yodaswap

          # Check if any files were modified
          if git diff --quiet; then
          echo "✅ Code is already properly formatted"
          else
          echo "🧹 Code formatting applied"

          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Add and commit changes
          git add .
          git commit -m "🧹 Auto-format Swift code

          - Applied SwiftFormat rules
          - Improved code consistency
          - Enhanced readability

          Generated by: GitHub Actions
          Workflow: Code Quality & Auto-Fix"

          # Push changes (only if not a PR from fork)
          if [ "${{ github.event_name }}" != "pull_request" ] || [ "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.repository }}" ]; then
          git push
          fi
          fi

          # ==========================================
          # 📝 DOCUMENTATION GENERATION
          # ==========================================
          documentation-generation:
          name: 📝 Documentation Generation
          runs-on: macos-14

          steps:

      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🍎 Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ env.XCODE_VERSION }}

      - name: 🔧 Install SwiftDoc
        run: |
          # Install swift-doc for documentation generation
          git clone https://github.com/SwiftDocOrg/swift-doc.git
          cd swift-doc
          swift build -c release
          sudo cp .build/release/swift-doc /usr/local/bin/
          cd ..
          rm -rf swift-doc


      - name: 📝 Generate Documentation
        run: |
          echo "📝 Generating Swift documentation..."

          mkdir -p docs

          # Generate documentation for main modules
          swift-doc generate ManusPsiqueia \
          --module-name ManusPsiqueia \
          --output docs \
          --format html \
          --base-url "https://thalesandrades.github.io/ManusPsiqueia/"

          # Create index page
          cat > docs/index.html << EOF
          <!DOCTYPE html>
          <html>
          <head>
            <title>ManusPsiqueia Documentation</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
          body { font-family: -apple-system, BlinkMacSystemFont, sans-serif; margin: 40px; }
          h1 { color: #8B5CF6; }
                .header { text-align: center; margin-bottom: 40px; }
                .modules { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
                .module { border: 1px solid #e0e0e0; border-radius: 8px; padding: 20px; }
                .module h3 { margin-top: 0; color: #333; }
          a { color: #8B5CF6; text-decoration: none; }
          a:hover { text-decoration: underline; }
            </style>
          </head>
          <body>
            <div class="header">
                <h1>🧠 ManusPsiqueia Documentation</h1>
                <p>Comprehensive documentation for the ManusPsiqueia mental health platform</p>
                <p><strong>Developed by:</strong> AiLun Tecnologia | <strong>CNPJ:</strong> 60.740.536/0001-75</p>
            </div>

            <div class="modules">
                <div class="module">
                    <h3>📱 Core Application</h3>
                    <p>Main application components and views</p>
                    <a href="ManusPsiqueia.html">View Documentation →</a>
                </div>

                <div class="module">
                    <h3>💰 Dynamic Pricing</h3>
                    <p>Flexible pricing system based on patient count</p>
                    <a href="DynamicPricing.html">View Documentation →</a>
                </div>

                <div class="module">
                    <h3>🔒 Security</h3>
                    <p>Security and privacy protection systems</p>
                    <a href="Security.html">View Documentation →</a>
                </div>

                <div class="module">
                    <h3>🧠 AI Insights</h3>
                    <p>Artificial intelligence for professional insights</p>
                    <a href="AIInsights.html">View Documentation →</a>
                </div>
            </div>

            <footer style="margin-top: 40px; text-align: center; color: #666;">
                <p>Generated on $(date) | Commit: ${{ github.sha }}</p>
            </footer>
          </body>
          </html>
          EOF


      - name: 📤 Upload Documentation
        uses: actions/upload-artifact@v3
        with:
        name: swift-documentation
        path: docs/

  # ==========================================
  # 🔍 CODE COMPLEXITY ANALYSIS
  # ==========================================
  complexity-analysis:
    name: 🔍 Code Complexity Analysis
    runs-on: macos-14

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Analyze Code Complexity
        run: |
          echo "🔍 Analyzing code complexity..."

          mkdir -p reports

          # Count lines of code
          echo "📊 Lines of Code Analysis:" > reports/complexity-report.txt
          echo "Total Swift files: $(find . -name "*.swift" -not -path "./.git/*" | wc -l)" >> reports/complexity-report.txt
          echo "Total lines of code: $(find . -name "*.swift" -not -path "./.git/*" | xargs wc -l | tail -1 | awk '{print $1}')" >> reports/complexity-report.txt
          echo "" >> reports/complexity-report.txt

        # Find large files
          echo "📏 Large Files (>200 lines):" >> reports/complexity-report.txt
          find . -name "*.swift" -not -path "./.git/*" -exec wc -l {} + | sort -nr | head -10 | while read lines file; do
          if [ "$lines" -gt 200 ]; then
          echo "- $file: $lines lines" >> reports/complexity-report.txt
          fi
          done
          echo "" >> reports/complexity-report.txt

        # Estimate cyclomatic complexity
          echo "🔄 High Complexity Indicators:" >> reports/complexity-report.txt
          grep -r "if\|while\|for\|switch\|case\|catch\|&&\|||" --include="*.swift" . | wc -l > /tmp/complexity_count
          echo "Total complexity indicators: $(cat /tmp/complexity_count)" >> reports/complexity-report.txt
          echo "" >> reports/complexity-report.txt

        # Find functions with many parameters
          echo "📋 Functions with Many Parameters:" >> reports/complexity-report.txt
          grep -r "func.*(" --include="*.swift" . | grep -E "\([^)]*,[^)]*,[^)]*,[^)]*,[^)]*," | head -5 >> reports/complexity-report.txt
          echo "" >> reports/complexity-report.txt

        # Generate recommendations
          echo "🎯 Recommendations:" >> reports/complexity-report.txt
          echo "1. Refactor files with >300 lines" >> reports/complexity-report.txt
          echo "2. Break down complex functions" >> reports/complexity-report.txt
          echo "3. Reduce parameter count in functions" >> reports/complexity-report.txt
          echo "4. Add unit tests for complex logic" >> reports/complexity-report.txt

          cat reports/complexity-report.txt


      - name: 📤 Upload Complexity Report
        uses: actions/upload-artifact@v3
        with:
        name: complexity-analysis
        path: reports/complexity-report.txt

  # ==========================================
  # 📋 CONSOLIDATE REPORTS
  # ==========================================
  consolidate-reports:
    name: 📋 Consolidate Quality Reports
    runs-on: ubuntu-latest
    needs: [swiftlint-analysis, code-formatting, documentation-generation, complexity-analysis]
    if: always()

    steps:
      - name: 📥 Download All Reports
        uses: actions/download-artifact@v3

      - name: 📋 Create Master Quality Report
        run: |
          echo "📋 Creating master quality report..."

          cat > master-quality-report.md << EOF
          # 🔧 Master Code Quality Report - ManusPsiqueia

        **Generated on:** $(date)
        **Commit:** ${{ github.sha }}
        **Workflow:** ${{ github.workflow }}

        ## 📊 Executive Summary

          This report consolidates all code quality analyses performed on the ManusPsiqueia project.

        ### Quality Checks Performed:

        1. 🔍 SwiftLint Analysis & Auto-Fix
        2. 🧹 Code Formatting
        3. 📝 Documentation Generation
        4. 🔍 Code Complexity Analysis

        ## 🎯 Quality Metrics

          EOF

        # Add SwiftLint summary if available
          if [ -f "code-quality-reports/swiftlint-summary.txt" ]; then
          echo "### 🔍 SwiftLint Results:" >> master-quality-report.md
          echo "\`\`\`" >> master-quality-report.md
          cat code-quality-reports/swiftlint-summary.txt >> master-quality-report.md
          echo "\`\`\`" >> master-quality-report.md
          echo "" >> master-quality-report.md
          fi

        # Add complexity analysis if available
          if [ -f "complexity-analysis/complexity-report.txt" ]; then
          echo "### 🔍 Complexity Analysis:" >> master-quality-report.md
          echo "\`\`\`" >> master-quality-report.md
          head -10 complexity-analysis/complexity-report.txt >> master-quality-report.md
          echo "\`\`\`" >> master-quality-report.md
          echo "" >> master-quality-report.md
          fi

          cat >> master-quality-report.md << EOF

        ## 🔧 Actions Taken

        - ✅ SwiftLint auto-corrections applied
        - ✅ Code formatting standardized
        - ✅ Documentation generated
        - ✅ Complexity analysis completed

        ## 📈 Quality Trends

        - **Code Quality:** Improving with automated fixes
        - **Documentation:** Comprehensive API documentation
        - **Complexity:** Monitored and controlled
        - **Standards:** Enforced through CI/CD

        ## 📞 Contact Information

        **Developed by:** AiLun Tecnologia
        **CNPJ:** 60.740.536/0001-75
        **Email:** contato@ailun.com.br

        ---

        *This report is automatically generated by the ManusPsiqueia quality pipeline.*
          EOF


      - name: 📤 Upload Master Report
        uses: actions/upload-artifact@v3
        with:
        name: master-quality-report
        path: master-quality-report.md

      - name: 💬 Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('master-quality-report.md', 'utf8');

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `## 🔧 Code Quality Analysis Results\n\n${report}`
          });

  # ==========================================
  # 📧 QUALITY NOTIFICATIONS
  # ==========================================
  quality-notifications:
    name: 📧 Quality Notifications
    runs-on: ubuntu-latest
    needs: [consolidate-reports]
    if: always()

    steps:
      - name: 📧 Send Quality Summary
        run: |
          echo "📧 Code quality analysis completed for ManusPsiqueia"
          echo "Timestamp: $(date)"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref }}"
          echo "Workflow Status: ${{ job.status }}"

        # Quality metrics summary
          echo "🎯 Quality improvements applied automatically"
          echo "📊 Reports generated and uploaded"
          echo "🔧 Auto-fixes committed to repository"
