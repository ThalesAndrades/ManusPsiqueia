#!/bin/bash

# Script de Valida√ß√£o de Assinatura de C√≥digo - ManusPsiqueia
# Autor: Manus AI
# Data: 22 de setembro de 2025

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîê Validador de Assinatura de C√≥digo - ManusPsiqueia${NC}"
echo "========================================================"

# Fun√ß√£o para verificar se estamos no Xcode Cloud
is_xcode_cloud() {
    [ "$CI_XCODE_CLOUD" = "true" ]
}

# Fun√ß√£o para verificar configura√ß√µes de assinatura
check_code_signing_config() {
    local config_file=$1
    local environment=$2
    
    echo -e "${YELLOW}üìã Verificando configura√ß√µes de assinatura para $environment...${NC}"
    
    if [ ! -f "$config_file" ]; then
        echo -e "${RED}‚ùå Arquivo de configura√ß√£o n√£o encontrado: $config_file${NC}"
        return 1
    fi
    
    # Verificar configura√ß√µes obrigat√≥rias
    local required_settings=(
        "CODE_SIGN_STYLE"
        "DEVELOPMENT_TEAM"
        "CODE_SIGN_IDENTITY"
        "PRODUCT_BUNDLE_IDENTIFIER"
    )
    
    local missing_settings=0
    
    for setting in "${required_settings[@]}"; do
        if grep -q "^$setting" "$config_file"; then
            local value=$(grep "^$setting" "$config_file" | cut -d'=' -f2 | xargs)
            echo -e "${GREEN}‚úÖ $setting = $value${NC}"
        else
            echo -e "${RED}‚ùå $setting n√£o encontrado${NC}"
            missing_settings=$((missing_settings + 1))
        fi
    done
    
    if [ $missing_settings -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Todas as configura√ß√µes de assinatura est√£o presentes${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $missing_settings configura√ß√£o(√µes) de assinatura faltando${NC}"
        return 1
    fi
}

# Fun√ß√£o para validar Bundle IDs
validate_bundle_ids() {
    echo -e "${YELLOW}üì± Validando Bundle Identifiers...${NC}"
    
    local configs=(
        "Configuration/Development.xcconfig:com.ailun.manuspsiqueia.dev"
        "Configuration/Staging.xcconfig:com.ailun.manuspsiqueia.beta"
        "Configuration/Production.xcconfig:com.ailun.manuspsiqueia"
    )
    
    for config_pair in "${configs[@]}"; do
        local config_file=$(echo "$config_pair" | cut -d':' -f1)
        local expected_bundle_id=$(echo "$config_pair" | cut -d':' -f2)
        local environment=$(basename "$config_file" .xcconfig)
        
        if [ -f "$config_file" ]; then
            if grep -q "PRODUCT_BUNDLE_IDENTIFIER.*$expected_bundle_id" "$config_file"; then
                echo -e "${GREEN}‚úÖ $environment: Bundle ID correto ($expected_bundle_id)${NC}"
            else
                echo -e "${RED}‚ùå $environment: Bundle ID incorreto ou n√£o encontrado${NC}"
                echo -e "${YELLOW}   Esperado: $expected_bundle_id${NC}"
            fi
        else
            echo -e "${RED}‚ùå $environment: Arquivo de configura√ß√£o n√£o encontrado${NC}"
        fi
    done
}

# Fun√ß√£o para verificar certificados (apenas no Xcode Cloud)
check_certificates() {
    if is_xcode_cloud; then
        echo -e "${YELLOW}üîë Verificando certificados no Xcode Cloud...${NC}"
        
        # Verificar se o DEVELOPMENT_TEAM_ID est√° definido
        if [ -n "$DEVELOPMENT_TEAM_ID" ]; then
            echo -e "${GREEN}‚úÖ DEVELOPMENT_TEAM_ID definido: $DEVELOPMENT_TEAM_ID${NC}"
        else
            echo -e "${RED}‚ùå DEVELOPMENT_TEAM_ID n√£o definido${NC}"
            echo -e "${YELLOW}   Configure no Xcode Cloud Environment Variables${NC}"
            return 1
        fi
        
        # Listar certificados dispon√≠veis
        echo -e "${BLUE}üìã Certificados dispon√≠veis:${NC}"
        security find-identity -v -p codesigning 2>/dev/null || echo "Nenhum certificado encontrado"
        
    else
        echo -e "${YELLOW}‚ö†Ô∏è N√£o est√° executando no Xcode Cloud - pulando verifica√ß√£o de certificados${NC}"
    fi
}

# Fun√ß√£o para verificar provisioning profiles
check_provisioning_profiles() {
    if is_xcode_cloud; then
        echo -e "${YELLOW}üìÑ Verificando Provisioning Profiles no Xcode Cloud...${NC}"
        
        # Listar provisioning profiles dispon√≠veis
        local profiles_dir="$HOME/Library/MobileDevice/Provisioning Profiles"
        if [ -d "$profiles_dir" ]; then
            local profile_count=$(find "$profiles_dir" -name "*.mobileprovision" | wc -l)
            echo -e "${GREEN}‚úÖ $profile_count provisioning profile(s) encontrado(s)${NC}"
            
            # Listar profiles
            find "$profiles_dir" -name "*.mobileprovision" | while read profile; do
                local profile_name=$(security cms -D -i "$profile" 2>/dev/null | plutil -p - | grep -A1 Name | tail -1 | cut -d'"' -f2)
                echo -e "${BLUE}  üìÑ $profile_name${NC}"
            done
        else
            echo -e "${YELLOW}‚ö†Ô∏è Diret√≥rio de provisioning profiles n√£o encontrado${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è N√£o est√° executando no Xcode Cloud - pulando verifica√ß√£o de provisioning profiles${NC}"
    fi
}

# Fun√ß√£o para validar configura√ß√µes do Info.plist
validate_info_plist() {
    echo -e "${YELLOW}üì± Validando Info.plist...${NC}"
    
    local info_plist="ManusPsiqueia/Info.plist"
    
    if [ ! -f "$info_plist" ]; then
        echo -e "${RED}‚ùå Info.plist n√£o encontrado: $info_plist${NC}"
        return 1
    fi
    
    # Verificar configura√ß√µes obrigat√≥rias
    local required_keys=(
        "CFBundleIdentifier"
        "CFBundleVersion"
        "CFBundleShortVersionString"
        "CFBundleDisplayName"
    )
    
    local missing_keys=0
    
    for key in "${required_keys[@]}"; do
        if grep -q "$key" "$info_plist"; then
            echo -e "${GREEN}‚úÖ $key presente no Info.plist${NC}"
        else
            echo -e "${RED}‚ùå $key n√£o encontrado no Info.plist${NC}"
            missing_keys=$((missing_keys + 1))
        fi
    done
    
    # Verificar se usa vari√°veis de build
    if grep -q '$(CURRENT_PROJECT_VERSION)' "$info_plist"; then
        echo -e "${GREEN}‚úÖ CFBundleVersion usa vari√°vel de build${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è CFBundleVersion n√£o usa vari√°vel de build${NC}"
    fi
    
    if grep -q '$(MARKETING_VERSION)' "$info_plist"; then
        echo -e "${GREEN}‚úÖ CFBundleShortVersionString usa vari√°vel de build${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è CFBundleShortVersionString n√£o usa vari√°vel de build${NC}"
    fi
    
    if [ $missing_keys -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Info.plist est√° v√°lido${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Info.plist tem $missing_keys chave(s) faltando${NC}"
        return 1
    fi
}

# Fun√ß√£o para gerar relat√≥rio de valida√ß√£o
generate_validation_report() {
    local report_file="code_signing_validation_report.txt"
    
    echo "Gerando relat√≥rio de valida√ß√£o..."
    
    cat > "$report_file" << EOF
=== RELAT√ìRIO DE VALIDA√á√ÉO DE ASSINATURA DE C√ìDIGO ===

Projeto: ManusPsiqueia
Data: $(date)
Ambiente: $(if is_xcode_cloud; then echo "Xcode Cloud"; else echo "Local"; fi)

=== CONFIGURA√á√ïES VERIFICADAS ===

1. Arquivos de Configura√ß√£o (.xcconfig)
   - Development.xcconfig: $([ -f "Configuration/Development.xcconfig" ] && echo "‚úÖ Presente" || echo "‚ùå Ausente")
   - Staging.xcconfig: $([ -f "Configuration/Staging.xcconfig" ] && echo "‚úÖ Presente" || echo "‚ùå Ausente")
   - Production.xcconfig: $([ -f "Configuration/Production.xcconfig" ] && echo "‚úÖ Presente" || echo "‚ùå Ausente")

2. Info.plist
   - Arquivo: $([ -f "ManusPsiqueia/Info.plist" ] && echo "‚úÖ Presente" || echo "‚ùå Ausente")
   - Configura√ß√µes: $(grep -q "CFBundleIdentifier" "ManusPsiqueia/Info.plist" 2>/dev/null && echo "‚úÖ V√°lidas" || echo "‚ùå Inv√°lidas")

3. Bundle Identifiers
   - Development: com.ailun.manuspsiqueia.dev
   - Staging: com.ailun.manuspsiqueia.beta
   - Production: com.ailun.manuspsiqueia

=== VARI√ÅVEIS DE AMBIENTE ===

EOF

    if is_xcode_cloud; then
        echo "DEVELOPMENT_TEAM_ID: $([ -n "$DEVELOPMENT_TEAM_ID" ] && echo "‚úÖ Definida" || echo "‚ùå N√£o definida")" >> "$report_file"
    else
        echo "Ambiente local - vari√°veis de ambiente n√£o verificadas" >> "$report_file"
    fi
    
    echo "" >> "$report_file"
    echo "=== RECOMENDA√á√ïES ===" >> "$report_file"
    echo "" >> "$report_file"
    echo "1. Certifique-se de que DEVELOPMENT_TEAM_ID est√° configurado no Xcode Cloud" >> "$report_file"
    echo "2. Verifique se os certificados de distribui√ß√£o est√£o v√°lidos" >> "$report_file"
    echo "3. Confirme que os provisioning profiles est√£o atualizados" >> "$report_file"
    echo "4. Teste o build em cada ambiente antes do deploy" >> "$report_file"
    
    echo -e "${GREEN}‚úÖ Relat√≥rio gerado: $report_file${NC}"
}

# Fun√ß√£o principal
main() {
    echo "Iniciando valida√ß√£o de assinatura de c√≥digo..."
    echo ""
    
    local validation_errors=0
    
    # Verificar configura√ß√µes de assinatura para cada ambiente
    if ! check_code_signing_config "Configuration/Development.xcconfig" "Development"; then
        validation_errors=$((validation_errors + 1))
    fi
    
    echo ""
    
    if ! check_code_signing_config "Configuration/Staging.xcconfig" "Staging"; then
        validation_errors=$((validation_errors + 1))
    fi
    
    echo ""
    
    if ! check_code_signing_config "Configuration/Production.xcconfig" "Production"; then
        validation_errors=$((validation_errors + 1))
    fi
    
    echo ""
    
    # Validar Bundle IDs
    validate_bundle_ids
    echo ""
    
    # Validar Info.plist
    if ! validate_info_plist; then
        validation_errors=$((validation_errors + 1))
    fi
    
    echo ""
    
    # Verificar certificados e provisioning profiles (apenas no Xcode Cloud)
    check_certificates
    echo ""
    
    check_provisioning_profiles
    echo ""
    
    # Gerar relat√≥rio
    generate_validation_report
    echo ""
    
    # Resultado final
    if [ $validation_errors -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Valida√ß√£o de assinatura de c√≥digo conclu√≠da com sucesso!${NC}"
        echo -e "${GREEN}üöÄ Projeto est√° pronto para build no Xcode Cloud${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Valida√ß√£o falhou com $validation_errors erro(s)${NC}"
        echo -e "${YELLOW}‚ö†Ô∏è Corrija os problemas antes de fazer build no Xcode Cloud${NC}"
        return 1
    fi
}

# Executar fun√ß√£o principal
main "$@"
